# 2 - build Unbound
name: CD 21 Manual build Adguard docker
   
on:   
  workflow_dispatch:

jobs:
  buildvars:
    runs-on: ubuntu-latest
    outputs:
      BUILD_DATE: ${{ steps.IMPORT_BUILDVARS.outputs.BUILD_DATE }}
      ADGUARD_VERSION: ${{ steps.IMPORT_BUILDVARS.outputs.ADGUARD_VERSION }}
      UNBOUND_DOCKERBUILDENV_VERSION: ${{ steps.IMPORT_BUILDVARS.outputs.UNBOUND_DOCKERBUILDENV_VERSION }}
      BUILD_IMAGE_VERSION: ${{ steps.IMPORT_BUILDVARS.outputs.BUILD_IMAGE_VERSION }}
      
    steps:             
    - name: Checkout source
      uses: actions/checkout@v5
      with:
        persist-credentials: false
    
    - name: Import build variables from buildvars file
      id: IMPORT_BUILDVARS
      run: |
        FLAG_NEWREVISION=false
        cat buildvars | grep BUILD_DATE >> $GITHUB_OUTPUT
        cat buildvars | grep ADGUARD_VERSION >> $GITHUB_OUTPUT
        cat buildvars | grep UNBOUND_DOCKERBUILDENV_VERSION >> $GITHUB_OUTPUT
        cat buildvars | grep OPENSSL_DOCKERBUILDENV_VERSION >> $GITHUB_OUTPUT

        BUILD_IMAGE_VERSION=$(cat buildvars | grep BUILD_IMAGE_VERSION  | cut -d= -f2)

        if [[ $(curl -s https://api.github.com/repos/megavolts/adguard_unbound-docker/releases | grep "status" | cut -d\" -f4) = 404 ]];
            then
            echo "No release existing"
        else
            # Check for latest release version
            LATEST_RELEASE=$(curl -s https://api.github.com/repos/megavolts/adguard_unbound-docker/releases | jq '.[0] | .name' -r)

            if [[ $LATEST_RELEASE = $BUILD_IMAGE_VERSION ]];
                then
                echo "Release $BUILD_IMAGE_VERSION already exist. Updated build version with next revision"
                BUILD_VERSION=$( echo $BUILD_IMAGE_VERSION | cut -d- -f1)
                BUILD_REVISION=$( echo $BUILD_IMAGE_VERSION | cut -d- -f2)
                BUILD_REVISION=$(( $BUILD_IMAGE_VERSION +1 ))
                BUILD_IMAGE_VERSION=$BUILD_VERSION-$BUILD_REVISION

                echo "BUILD_IMAGE_VERSION=$BUILD_IMAGE_VERSION" >> $GITHUB_OUTPUT
                echo "FLAG_NEWREVISION=true"
            fi
            # Update buildvars
        fi

        echo "Building docker image $BUILD_IMAGE_VERSION with $OPENSSL_DOCKERBUILDENV_VERSION openssl, $UNBOUND_DOCKERBUILDENV_VERSION unbound and AdguardHome v$ADGUARD_VERSION on $BUILD_DATE"
    # TODO make this job happens only if FLAG_REVISION=1
    - name: Import GPG key 
      id: IMPORT_GPG
      if: ${{ steps.IMPORT_BUILDVARS.outputs.FLAG_NEWREVISION }}
      uses: crazy-max/ghaction-import-gpg@v6
      with:
        gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.BOT_GPG_PWD }}
        git_user_signingkey: true
        git_commit_gpgsign: true
        git_push_gpgsign: false
        trust_level: 5

    - name: Push updates buildvar to repository if needed
      if: ${{ steps.IMPORT_BUILDVARS.outputs.FLAG_NEWREVISION }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GIT_AUTHOR_NAME: ${{ steps.IMPORT_GPG.outputs.name }}
        GIT_AUTHOR_EMAIL: ${{ steps.IMPORT_GPG.outputs.email }}
        GIT_COMMITTER_NAME: ${{ steps.IMPORT_GPG.outputs.name }}
        GIT_COMMITTER_EMAIL: ${{ steps.IMPORT_GPG.outputs.email }}
      run: |
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}  

        BUILD_DATE=$(date  --iso-8601=seconds --utc)
        ADGUARD_VERSION=${{ steps.IMPORT_BUILDVARS.outputs.ADGUARD_VERSION }}
        UNBOUND_DOCKERBUILDENV_VERSION=${{ steps.IMPORT_BUILDVARS.outputs.UNBOUND_DOCKERBUILDENV_VERSION }}
        OPENSSL_DOCKERBUILDENV_VERSION=${{ steps.IMPORT_BUILDVARS.outputs.OPENSSL_DOCKERBUILDENV_VERSION }}
        BUILD_IMAGE_VERSION=${{ steps.IMPORT_BUILDVARS.outputs.BUILD_IMAGE_VERSION }}
        
        echo "Upcoming build version: $BUILD_IMAGE_VERSION"
        echo BUILD_DATE=$BUILD_DATE > buildvars
        echo ADGUARD_VERSION=$ADGUARD_VERSION >> buildvars
        echo UNBOUND_DOCKERBUILDENV_VERSION=$UNBOUND_DOCKERBUILDENV_VERSION >> buildvars
        echo OPENSSL_DOCKERBUILDENV_VERSION=$OPENSSL_DOCKERBUILDENV_VERSION >> buildvars
        echo BUILD_IMAGE_VERSION=$BUILD_IMAGE_VERSION >> buildvars

        git add buildvars
        git commit buildvars -m "Updated buildvars"
        git push or

  adguard_unbound-build: 
    runs-on: ubuntu-latest
    needs: buildvars
    steps:
      - name: Checkout source
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Dockerhub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
    
      - name: Build and push
        uses: docker/build-push-action@v6
        env:
          DOCKERHUB_SLUG: "megavolts/adguard_unbound"
        with:
          platforms: linux/amd64,linux/arm64
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            BUILD_DATE=${{ needs.buildvars.outputs.BUILD_DATE }}  
            ADGUARD_VERSION=${{ needs.buildvars.outputs.ADGUARD_VERSION }}  
            UNBOUND_DOCKERBUILDENV_VERSION=${{ needs.buildvars.outputs.UNBOUND_DOCKERBUILDENV_VERSION }}
            BUILD_IMAGE_VERSION=${{ needs.buildvars.outputs.BUILD_IMAGE_VERSION }}
          file: adguard_unbound/Dockerfile 
          context: ./adguard_unbound/
          push: ${{ github.event_name != 'pull_request' }}
          sbom: ${{ github.event_name != 'pull_request' }}
          provenance: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.DOCKERHUB_SLUG }}:udhcpc    